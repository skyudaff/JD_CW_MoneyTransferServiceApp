/*
 * Transfer Money API
 * Transfer Money API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.TransferPostRequestAmount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransferPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-27T15:05:50.822875700+03:00[Europe/Moscow]")
public class TransferPostRequest {
  public static final String SERIALIZED_NAME_CARD_FROM_NUMBER = "cardFromNumber";
  @SerializedName(SERIALIZED_NAME_CARD_FROM_NUMBER)
  private String cardFromNumber;

  public static final String SERIALIZED_NAME_CARD_FROM_VALID_TILL = "cardFromValidTill";
  @SerializedName(SERIALIZED_NAME_CARD_FROM_VALID_TILL)
  private String cardFromValidTill;

  public static final String SERIALIZED_NAME_CARD_FROM_C_V_V = "cardFromCVV";
  @SerializedName(SERIALIZED_NAME_CARD_FROM_C_V_V)
  private String cardFromCVV;

  public static final String SERIALIZED_NAME_CARD_TO_NUMBER = "cardToNumber";
  @SerializedName(SERIALIZED_NAME_CARD_TO_NUMBER)
  private String cardToNumber;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private TransferPostRequestAmount amount;

  public TransferPostRequest() {
  }

  public TransferPostRequest cardFromNumber(String cardFromNumber) {
    
    this.cardFromNumber = cardFromNumber;
    return this;
  }

   /**
   * Get cardFromNumber
   * @return cardFromNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCardFromNumber() {
    return cardFromNumber;
  }


  public void setCardFromNumber(String cardFromNumber) {
    this.cardFromNumber = cardFromNumber;
  }


  public TransferPostRequest cardFromValidTill(String cardFromValidTill) {
    
    this.cardFromValidTill = cardFromValidTill;
    return this;
  }

   /**
   * Get cardFromValidTill
   * @return cardFromValidTill
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCardFromValidTill() {
    return cardFromValidTill;
  }


  public void setCardFromValidTill(String cardFromValidTill) {
    this.cardFromValidTill = cardFromValidTill;
  }


  public TransferPostRequest cardFromCVV(String cardFromCVV) {
    
    this.cardFromCVV = cardFromCVV;
    return this;
  }

   /**
   * Get cardFromCVV
   * @return cardFromCVV
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCardFromCVV() {
    return cardFromCVV;
  }


  public void setCardFromCVV(String cardFromCVV) {
    this.cardFromCVV = cardFromCVV;
  }


  public TransferPostRequest cardToNumber(String cardToNumber) {
    
    this.cardToNumber = cardToNumber;
    return this;
  }

   /**
   * Get cardToNumber
   * @return cardToNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCardToNumber() {
    return cardToNumber;
  }


  public void setCardToNumber(String cardToNumber) {
    this.cardToNumber = cardToNumber;
  }


  public TransferPostRequest amount(TransferPostRequestAmount amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TransferPostRequestAmount getAmount() {
    return amount;
  }


  public void setAmount(TransferPostRequestAmount amount) {
    this.amount = amount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransferPostRequest transferPostRequest = (TransferPostRequest) o;
    return Objects.equals(this.cardFromNumber, transferPostRequest.cardFromNumber) &&
        Objects.equals(this.cardFromValidTill, transferPostRequest.cardFromValidTill) &&
        Objects.equals(this.cardFromCVV, transferPostRequest.cardFromCVV) &&
        Objects.equals(this.cardToNumber, transferPostRequest.cardToNumber) &&
        Objects.equals(this.amount, transferPostRequest.amount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardFromNumber, cardFromValidTill, cardFromCVV, cardToNumber, amount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransferPostRequest {\n");
    sb.append("    cardFromNumber: ").append(toIndentedString(cardFromNumber)).append("\n");
    sb.append("    cardFromValidTill: ").append(toIndentedString(cardFromValidTill)).append("\n");
    sb.append("    cardFromCVV: ").append(toIndentedString(cardFromCVV)).append("\n");
    sb.append("    cardToNumber: ").append(toIndentedString(cardToNumber)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cardFromNumber");
    openapiFields.add("cardFromValidTill");
    openapiFields.add("cardFromCVV");
    openapiFields.add("cardToNumber");
    openapiFields.add("amount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TransferPostRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TransferPostRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransferPostRequest is not found in the empty JSON string", TransferPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TransferPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransferPostRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("cardFromNumber") != null && !jsonObj.get("cardFromNumber").isJsonNull()) && !jsonObj.get("cardFromNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardFromNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardFromNumber").toString()));
      }
      if ((jsonObj.get("cardFromValidTill") != null && !jsonObj.get("cardFromValidTill").isJsonNull()) && !jsonObj.get("cardFromValidTill").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardFromValidTill` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardFromValidTill").toString()));
      }
      if ((jsonObj.get("cardFromCVV") != null && !jsonObj.get("cardFromCVV").isJsonNull()) && !jsonObj.get("cardFromCVV").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardFromCVV` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardFromCVV").toString()));
      }
      if ((jsonObj.get("cardToNumber") != null && !jsonObj.get("cardToNumber").isJsonNull()) && !jsonObj.get("cardToNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardToNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardToNumber").toString()));
      }
      // validate the optional field `amount`
      if (jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) {
        TransferPostRequestAmount.validateJsonObject(jsonObj.getAsJsonObject("amount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransferPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransferPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransferPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransferPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TransferPostRequest>() {
           @Override
           public void write(JsonWriter out, TransferPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransferPostRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransferPostRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransferPostRequest
  * @throws IOException if the JSON string is invalid with respect to TransferPostRequest
  */
  public static TransferPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransferPostRequest.class);
  }

 /**
  * Convert an instance of TransferPostRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

